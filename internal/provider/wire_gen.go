// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package provider

import (
	"context"
	"github.com/Goalt/FileSharer/internal/config"
	"github.com/Goalt/FileSharer/internal/infrastructure/http"
	"gorm.io/gorm/logger"
)

// Injectors from wire.go:

func InitializeApp(cfg config.Config, context2 context.Context) (Application, func(), error) {
	db, cleanup := provideGORM(cfg)
	fileInfoRepository := provideFileInfoRepository(db)
	fileSystemRepository, err := provideFileSystemRepository(cfg)
	if err != nil {
		cleanup()
		return Application{}, nil, err
	}
	cryptoRepository, err := provideCryptoRepository(cfg)
	if err != nil {
		cleanup()
		return Application{}, nil, err
	}
	cryptoInteractor := provideCryptoInteracor(cryptoRepository)
	uuidGenerator := provideUUIDGenerator()
	generatorInteractor := provideGeneratorInteractor(uuidGenerator)
	loggerInterface := provideLoggerGorm(cfg)
	logger := provideLogger(loggerInterface)
	fileInteractor := provideCalculatorInteractor(fileInfoRepository, fileSystemRepository, cryptoInteractor, generatorInteractor, logger)
	httpController := provideHTTPController(cfg, fileInteractor, loggerInterface)
	server := provideServer(cfg, httpController)
	application := provideApp(server, cfg, context2)
	return application, func() {
		cleanup()
	}, nil
}

// wire.go:

type Application struct {
	ctx context.Context
	log logger.Interface

	server  http.Server
	cleanup ServicesCleanup
}

func (a *Application) Run() error {

	go func() {
		err := a.server.Run()
		if err != nil {
			a.log.Error(a.ctx, err.Error())
		}
	}()

	<-a.ctx.Done()

	err := a.server.Stop()
	if err != nil {
		a.log.Error(a.ctx, err.Error())
	}

	return nil
}

func provideApp(server http.Server, cfg config.Config, ctx context.Context) Application {
	return Application{
		server: server,
		ctx:    ctx,
	}
}
